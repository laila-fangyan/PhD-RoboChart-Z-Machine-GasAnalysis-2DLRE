package Chemical
enumeration Status {  noGas gasD } import sequence_toolkit::*
enumeration Angle { Left Right Back Front }
datatype GasSensor {
	c : Chem
	i : Intensity
}
type Chem
type Intensity

//Analyze whether there is gas or not
function analysis( gs : Seq( GasSensor )) : Status {
}
function goreq(  i1 : Intensity , i2 : Intensity) : boolean {
}

//Return the highest intensity
function intensity( gs : Seq( GasSensor )) : Intensity {
	precondition size ( gs ) > 0
	postcondition forall x : nat | 0 < x /\ x <= size ( gs ) @ goreq ( result , gs [ x ] . i )
	postcondition exists y: nat | 0 < y /\ y <= size (gs) @ result == gs[y].i
}
function location( gs : Seq( GasSensor )) : Angle {
	precondition size ( gs ) > 0
	postcondition exists x : nat | 0 < x /\ x <= size ( gs ) @ gs [ x ] . i == intensity ( gs ) /\ result == angle ( x )
}
function angle( x : nat) : Angle { 
}

function card(A:Set(?X)): nat {
}

import Location::*

stm GasAnalysis {
	var st : Status
	var gs : Seq(GasSensor)
	var ins : Intensity
	var anl : Angle
	event gas : Seq(GasSensor) //Seq can be treated as vector
	event resume
	
	
	const thr : Intensity
	
	event turn : Angle
	event stop
initial i1
	state NoGas {
	}
	state Analysis {
		entry st = analysis ( gs )
	}
	state GasDetected {
		entry ins = intensity ( gs )
	}
	transition t1 {
		from i1
		to NoGas
		action 
	gs = < > ; anl = Angle :: Front
	}
	transition t2 {
		from NoGas
		to Analysis
		trigger 
	
	gas ? gs
	}
	transition t3 {
		from Analysis
		to NoGas
		condition st == Status::noGas
		action 
	send resume
	}
	transition t4 {
		from Analysis
		to GasDetected
		condition st == Status::gasD
	}
	final j1
	state Reading {
	}
	transition t8 {
		from GasDetected
		to j1
		condition goreq ( ins , thr )
		action 
	send stop
	}
	transition t9a {
		from GasDetected
		to Reading
		condition 
		
		
		not goreq ( ins , thr )
		action anl = location ( gs ) ; turn ! anl
	}
	transition t0 {
		from Reading
		to Analysis
		trigger 
	
	gas ? gs
	}
}


